#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "ctype.h"

#include "token.h"
//#include "sysdef.h"
#include "parse.h"

//Global Variables (gotten from file)
//int toksInLine[LIMIT];
//char *lineData[LIMIT][MAXTOKS];

// Grammar Definitions

/*void readData() {
    FILE *fp; 
    char *file;
    int lineNum = 1, pos = 0;

    // File name 
    file = "scanoutput.txt"; 

    if((fp = fopen(file,"r"))== NULL){
        printf("File does not exist or corrupted.\n");
        exit(EXIT_FAILURE);
    }
    fseek(fp, 0, SEEK_END); // Reset file pointer position -> 0
    if(ftell(fp) == 0){
        printf("File is empty.\n");
        exit(EXIT_FAILURE);
    }

    while((c = fgetc(fp)) != EOF){
      if (c == '\n'){
	if((d = fgetc(fp) == '\n'){
	    lineNum++;
	  } else {
	    fseek(fp, -1, SEEK_CUR);
	  }
	pos = 0;
      } else if (pos == 0){
	lineData[lineNum][pos] = c;
      

	}*/

void parse(char *lineData[LIMIT][MAXTOKS], int tokensInLine[LIMIT], int lineNumGlobal){
  int k = 0;
  printf("lng = %d\n", lineNumGlobal);
  for (k = 0; k < lineNumGlobal; k++){
    printf("TokensinlinePARSER %d = %d\n", k, tokensInLine[k]);
    //tokensInLineScan[k] = tokensInLine[k];
  }

}

// Main Function
/*int main(int argc, string argv[]){
  
  
  string array[6] = {"a", "=", "1", "+", "2", ";"}; // Example input 
  printf("%s %s %s %s %s %s \n", array[0], array[1], array[2], array[3], array[4], array[5]);
  //int i;
  //printf("%d\n", tokensInLine[8]);
  //for (i=0;i<tokensInLine[8];i++){
  //  printf("%s ", linePositions[8][i]);
  //}
  /*  int k = 0;
  printf("%d\n", lineNumGlobal);
  for (k = 0; k < lineNumGlobal; k++){
    printf("Tokensinline %d = %d\n", k, tokensInLine[k]);
    //tokensInLineScan[k] = tokensInLine[k];
    }
  //  printf
  if (isAssignment(array)){
    if (isExpression(array)){
      newExpression(array);
    }
    else{
      newIdentifier(array);
    }
  }
  else if (isConditional(array)){
    newConditional(array);
  }
}
*/
//Function definitions

int isArray(char **arr){
  return arr[1] == "[" && arr[3] == "]";
}

int isAssignment(char **arr){
  return arr[1] == "=" || arr[4] == "=";
}

int isExpression(char **arr){
  return isOp(arr[3]);
}

int isOp(string operator){
  return operator == "+" || operator == "-" || operator == "*" || operator == "/";
}

int isConditional(char **arr){
  return arr[0] == "if";
}

struct expression* newExpression(string *arr){
  struct expression* eq_node = malloc(sizeof(struct expression)); 
  eq_node->eq = equals; 
  struct identifier* i = newIdentifier(arr);
  struct operation* p = newOperation(arr);
}

struct identifier* newIdentifier(string *arr){
  struct identifier* id_node = malloc(sizeof (struct identifier)); 
  id_node->name = arr[0];
  id_node->t;
}

struct operation* newOperation(string *arr){
  struct operation* op_node = malloc(sizeof(struct operation));
  struct term* term_node1 = malloc(sizeof(struct term));
  struct term* term_node2 = malloc(sizeof(struct term));
  op_node->op = arr[3];
  op_node->term1 = term_node1;
  op_node->term2 = term_node2;
  term_node1->literal = arr[2];
  term_node2->literal = arr[4];  
}

struct conditional* newConditional(string *arr){
  struct conditional* cond_node = malloc(sizeof(struct conditional));
  struct statement* if_node = malloc(sizeof(struct statement));
  struct statement* else_node = malloc(sizeof(struct statement));  
}
 
